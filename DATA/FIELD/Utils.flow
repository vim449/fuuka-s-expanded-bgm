import("Music.msg");

const int ShufflePool = 9999;
const int ShuffleInit = 9998;
const int PreviousSong = 9997;

const int ShuffleAll = 9999;
const int ShufflePersona = 9998;
const int ShuffleSMT = 9997;
const int ShuffleSpin = 9996;
const int ShuffleP1 = 9995;
const int ShuffleIS = 9994;
const int ShuffleEP = 9993;
const int ShuffleP3 = 9992;
const int ShuffleP4 = 9991;
const int ShufflePQ = 9990;
const int ShuffleP5 = 9989;
const int ShuffleSMT1 = 9988;
const int ShuffleSMT3 = 9987;
const int ShuffleMJ = 9986;
const int ShuffleMJ2 = 9985;
const int ShuffleDDS = 9984;
const int ShuffleRaidou = 9983;
const int ShuffleOther = 9982;


const int p1_start = 500;
const int p1_len = 6;
const int is_start = 550;
const int is_len = 10;
const int ep_start = 600;
const int ep_len = 9;
const int p3_start = 1200;
const int p3_len = 4;
const int p4_start = 650;
const int p4_len = 4;
const int p5_start = 700;
const int p5_len = 4;
const int pq_start = 750;
const int pq_len = 3;
const int smt1_start = 800;
const int smt1_len = 4;
const int smt3_start = 850;
const int smt3_len = 4;
const int mj_start = 900;
const int mj_len = 3;
const int mj2_start = 950;
const int mj2_len = 5;
const int dds_start = 1050;
const int dds_len = 4;
const int rai_start = 1100;
const int rai_len = 4;
const int misc_start = 1150;
const int misc_len = 3;

const int series = 3;
const int persona_games = 7;
const int smt_games = 2;
const int spin_games = 5;

const int PersonaStID = 579;
const int PersonaEdID = 585;
const int SMTStID = 586;
const int SMTEdID = 587;
const int SpinStID = 588;
const int SpinEdID = 592;

const int bigRandomNum = 1000;

void Random() {
	bool notFound = true;
	while (notFound)
	{
		SET_CNT(ShufflePool, ShuffleAll);
		int randNum = AI_RND(bigRandomNum);
		int selection = randNum % series;
		switch (selection) {
			case 0:
				for (int i = PersonaStID ; i <= PersonaEdID; i++) {
					if (BIT_CHK(i)) {
						notFound = RandomPersona();
						break;
					}
				}
				break;
			case 1:
				for (int i = SMTStID ; i <= SMTEdID; i++) {
					if (BIT_CHK(i)) {
						notFound = RandomSMT();
						break;
					}
				}
				break;
			case 2:
				for (int i = SpinStID; i <= SpinEdID; i++) {
					if (BIT_CHK(i)) {
						notFound = RandomSpin();
						break;
					}
				}
				break;
			default:
				break;
		}
	}
	
}

bool RandomPersona() {
	int notFound = 1;

	while (notFound) {
		if (GET_CNT(ShuffleInit) == 2) {
			SET_CNT(ShufflePool, ShufflePersona);
		}
		int randNum = AI_RND(bigRandomNum);
		int selection = randNum % persona_games;
		switch (selection) {
			case 0:
				if (BIT_CHK(579)) {
					notFound = RandomGame(p1_len, p1_start, ShuffleP1, ShufflePersona);
				}
				break;
			case 1:
				if (BIT_CHK(580)) {
					notFound = RandomGame(is_len, is_start, ShuffleIS, ShufflePersona);
				}
				break;
			case 2:
				if (BIT_CHK(581)) {
					notFound = RandomGame(ep_len, ep_start, ShuffleEP, ShufflePersona);
				}
				break;
			case 3:
				if (BIT_CHK(582)) {
					notFound = RandomGame(p3_len, p3_start, ShuffleP3, ShufflePersona);
				}
				break;
			case 4:
				if (BIT_CHK(583)) {
					notFound = RandomGame(p4_len, p4_start, ShuffleP4, ShufflePersona);
				}
				break;
			case 5:
				if (BIT_CHK(584)) {
					notFound = RandomGame(p5_len, p5_start, ShuffleP5, ShufflePersona);
				}
				break;
			case 6:
				if (BIT_CHK(585)) {
					notFound = RandomGame(pq_len, pq_start, ShufflePQ, ShufflePersona);
				}
				break;
			default:
				break;
		}

		if (notFound == -1) return true;
	}
	
	return false;
}

bool RandomSMT() {
	int notFound = 1;
	
	while (notFound) {
		if (GET_CNT(ShuffleInit) == 2) {
			SET_CNT(ShufflePool, ShuffleSMT);
		}
		int randNum = AI_RND(bigRandomNum);
		int selection = randNum % smt_games;
		switch (selection) {
			case 0:
				if (BIT_CHK(586)) {
					notFound = RandomGame(smt1_len, smt1_start, ShuffleSMT1, ShuffleSMT);
				}
				break;
			case 1:
				if (BIT_CHK(587)) {
					notFound = RandomGame(smt3_len, smt3_start, ShuffleSMT3, ShuffleSMT);
				}
				break;
			default:
				break;
		}
		if (notFound == -1) return true;
	}
	return false;
}

bool RandomSpin() {
	int notFound = 1;
	
	while (notFound) {
		if (GET_CNT(ShuffleInit) == 2) {
			SET_CNT(ShufflePool, ShuffleSpin);
		}
		int randNum = AI_RND(bigRandomNum);
		int selection = randNum % spin_games;
		switch (selection) {
			case 0:
				if (BIT_CHK(588)) {
					notFound = RandomGame(mj_len, mj_start, ShuffleMJ, ShuffleSpin);
				}
				break;
			case 1:
				if (BIT_CHK(589)) {
					notFound = RandomGame(mj2_len, mj2_start, ShuffleMJ2, ShuffleSpin);
				}
				break;
			case 2:
				if (BIT_CHK(590)) {
					notFound = RandomGame(dds_len, dds_start, ShuffleDDS, ShuffleSpin);
				}
				break;
			case 3:
				if (BIT_CHK(591)) {
					notFound = RandomGame(rai_len, rai_start, ShuffleRaidou, ShuffleSpin);
				}
				break;
			case 4:
				if (BIT_CHK(592)) {
					notFound = RandomGame(misc_len, misc_start, ShuffleOther, ShuffleSpin);
				}
				break;
			default:
				break;
		}

		if (notFound == -1) return true;
	}
	return false;
}

int RandomGame(int game_len, int game_start, int game_shuffle, int series_shuffle) {
	bool notFound = true;
	while (notFound) {
		int randNum = AI_RND(bigRandomNum);
		int randomsong = (randNum % game_len) + game_start;
		if (GET_CNT(ShuffleInit) == 3) {
			SET_CNT(ShufflePool, game_shuffle);
		}
		if (randomsong == GET_CNT(1) || randomsong == GET_CNT(PreviousSong)) {
			if (GET_CNT(ShufflePool) == ShuffleAll) {
				return -1;
			}
			else if (GET_CNT(ShufflePool) == series_shuffle) {
				return 1;
			}
			else {
				notFound = true;
			}
		}
		else {
			notFound = false;
			playRandomBGM(randomsong);
		}
	}
	return 0;
}

void ReRandom() {
	switch (GET_CNT(ShufflePool)) {
	case 9982:
		RandomGame(misc_len, misc_start, ShuffleOther, ShuffleSpin);
		break;
	case 9983:
		RandomGame(rai_len, rai_start, ShuffleRaidou, ShuffleSpin);
		break;
	case 9984:
		RandomGame(dds_len, dds_start, ShuffleDDS, ShuffleSpin);
		break;
	case 9985:
		RandomGame(mj2_len, mj2_start, ShuffleMJ2, ShuffleSpin);
		break;
	case 9986:
		RandomGame(mj_len, mj_start, ShuffleMJ, ShuffleSpin);
		break;
	case 9987:
		RandomGame(smt3_len, smt3_start, ShuffleSMT3, ShuffleSMT);
		break;
	case 9988:
		RandomGame(smt1_len, smt1_start, ShuffleSMT1, ShuffleSMT);
		break;
	case 9989:
		RandomGame(p5_len, p5_start, ShuffleP5, ShufflePersona);
		break;
	case 9990:
		RandomGame(pq_len, pq_start, ShufflePQ, ShufflePersona);
		break;
	case 9991:
		RandomGame(p4_len, p4_start, ShuffleP4, ShufflePersona);
		break;
	case 9992:
		RandomGame(p3_len, p3_start, ShuffleP3, ShufflePersona);
		break;
	case 9993:
		RandomGame(ep_len, ep_start, ShuffleEP, ShufflePersona);
		break;
	case 9994:
		RandomGame(is_len, is_start, ShuffleIS, ShufflePersona);
		break;
	case 9995:
		RandomGame(p1_len, p1_start, ShuffleP1, ShufflePersona);
		break;
	case 9996:
		RandomSpin();
		break;
	case 9997:
		RandomSMT();
		break;
	case 9998:
		RandomPersona();
		break;
	case 9999:
		Random();
		break;
	default:
		break;
	}
}

void playBGM(int songid) {
	CALL_BGM(songid);
	SET_CNT(1, songid);
	SET_CNT(ShufflePool, 0);
	if (GET_CNT(1) >= 500) {
	MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
	}
}

void playRandomBGM(int songid) {
	//Set PreviousSong to Current Song
	SET_CNT(PreviousSong, GET_CNT(1));
	
	//Runs if Shuffle was Automatic
	if (GET_CNT(ShuffleInit) != 1 && GET_CNT(ShuffleInit) != 2 && GET_CNT(ShuffleInit) != 3) {
		//Check's if current song isn't Fuuka's and turns off Randomization
		if (GET_CNT(1) < 500) {
			SET_CNT(ShufflePool, 0);
		} 
		//Check's if current song is Fuuka's and plays it
		else {
			CALL_BGM(songid);
			SET_CNT(1, songid);
			SET_CNT(ShuffleInit, 0);
			musicNavi();
		}
	} else {
		CALL_BGM(songid);
		SET_CNT(1, songid);
		SET_CNT(ShuffleInit, 0);
		musicNavi();
	}
}

void musicNavi() {
	switch (GET_CNT(1)) {
		case 500:
			FUNCTION_011C(19, sebec);
			break;
		case 501:
			FUNCTION_011C(19, kandori);
			break;
		case 502:
			FUNCTION_011C(19, karmaPSX);
			break;
		case 503:
			FUNCTION_011C(19, karmaPSP);
			break;
		case 504:
			FUNCTION_011C(19, school);
			break;
		case 505:
			FUNCTION_011C(19, butterfly);
			break;
		case 550:
			FUNCTION_011C(19, zodiacISPSX);
			break;
		case 551:
			FUNCTION_011C(19, goldPSX);
			break;
		case 552:
			FUNCTION_011C(19, kasuISPSX);
			break;
		case 553:
			FUNCTION_011C(19, mayaPSX);
			break;
		case 554:
			FUNCTION_011C(19, katatISPSX);
			break;
		case 555:
			FUNCTION_011C(19, zodiacISPSP);
			break;
		case 556:
			FUNCTION_011C(19, goldPSP);
			break;
		case 557:
			FUNCTION_011C(19, kasuISPSP);
			break;
		case 558:
			FUNCTION_011C(19, mayaPSP);
			break;
		case 559:
			FUNCTION_011C(19, katatISPSP);
			break;
		case 600:
			FUNCTION_011C(19, factoryPSX);
			break;
		case 601:
			FUNCTION_011C(19, zodiacEPPSX);
			break;
		case 602:
			FUNCTION_011C(19, kasuEPPSX);
			break;
		case 603:
			FUNCTION_011C(19, katatEPPSX);
			break;
		case 604:
			FUNCTION_011C(19, factoryPSP);
			break;
		case 605:
			FUNCTION_011C(19, zodiacEPPSP);
			break;
		case 606:
			FUNCTION_011C(19, kasuEPPSP);
			break;
		case 607:
			FUNCTION_011C(19, katatEPPSP);
			break;
		case 608:
			FUNCTION_011C(19, shiori);
			break;
		case 650:
			FUNCTION_011C(19, sauna);
			break;
		case 651:
			FUNCTION_011C(19, game);
			break;
		case 652:
			FUNCTION_011C(19, heaven);
			break;
		case 653:
			FUNCTION_011C(19, longWay);
			break;
		case 700:
			FUNCTION_011C(19, beneathMask);
			break;
		case 701:
			FUNCTION_011C(19, maskInst);
			break;
		case 702:
			FUNCTION_011C(19, cake);
			break;
		case 703:
			FUNCTION_011C(19, life);
			break;
		case 704:
			FUNCTION_011C(19, believe);
			break;
		case 750:
			FUNCTION_011C(19, danger);
			break;
		case 751:
			FUNCTION_011C(19, maze);
			break;
		case 752:
			FUNCTION_011C(19, voice);
			break;
		case 800:
			FUNCTION_011C(19, cathedral);
			break;
		case 801:
			FUNCTION_011C(19, disco);
			break;
		case 802:
			FUNCTION_011C(19, makai);
			break;
		case 803:
			FUNCTION_011C(19, cityMakai);
			break;
		case 850:
			FUNCTION_011C(19, amala);
			break;
		case 851:
			FUNCTION_011C(19, soundTest);
			break;
		case 852:
			FUNCTION_011C(19, tokyo);
			break;
		case 853:
			FUNCTION_011C(19, ikebukuro);
			break;
		case 900:
			FUNCTION_011C(19, flame);
			break;
		case 901:
			FUNCTION_011C(19, devil);
			break;
		case 902:
			FUNCTION_011C(19, chaotic);
			break;
		case 950:
			FUNCTION_011C(19, ad);
			break;
		case 951:
			FUNCTION_011C(19, smash);
			break;
		case 952:
			FUNCTION_011C(19, evolution);
			break;
		case 953:
			FUNCTION_011C(19, assault);
			break;
		case 954:
			FUNCTION_011C(19, sourpuss);
			break;
		case 1050:
			FUNCTION_011C(19, sahasrara);
			break;
		case 1051:
			FUNCTION_011C(19, samsara);
			break;
		case 1052:
			FUNCTION_011C(19, madMart);
			break;
		case 1053:
			FUNCTION_011C(19, egg);
			break;
		case 1100:
			FUNCTION_011C(19, tsukudo);
			break;
		case 1101:
			FUNCTION_011C(19, go);
			break;
		case 1102:
			FUNCTION_011C(19, tsukigata);
			break;
		case 1103:
			FUNCTION_011C(19, adventure);
			break;
		case 1150:
			FUNCTION_011C(19, algon);
			break;
		case 1151:
			FUNCTION_011C(19, ezekiel);
			break;
		case 1152:
			FUNCTION_011C(19, belly);
			break;
		case 1200:
			FUNCTION_011C(19, snow);
			break;
		case 1201:
			FUNCTION_011C(19, mayaP3);
			break;
		case 1202:
			FUNCTION_011C(19, persona);
			break;
		case 1203:
			FUNCTION_011C(19, castle);
			break;
	}
}
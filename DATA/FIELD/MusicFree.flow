import("Music.msg");

const int PersonaStartID = 579;
const int PersonaEndID = 585;
const int SMTStartID = 586;
const int SMTEndID = 587;
const int SpinStartID = 588;
const int SpinEndID = 592;

void BGMorder_for_huka() {
	//Enable Music for Answer
	AnswerMusic();
	// Mask some	Random stuff out
	int mask = 0;
	if (FUNCTION_018B(6, 339) == 0) {
		mask = 1;
	}
	SET_MASK(mask);

	// bind exit correctly
	SEL_CHK_PAD(6, 3);
	int selection = SEL(BGMHUKA_OREDER_SEL);
	switch (selection) {
		case 0: // escape menu
			MSG(HUKA_ORDER_ESCAPE);
			SEL_CHK_PAD(6, 1);

			if (FUNCTION_01E9() == 1) {
				selection = SEL(FES_ESCAPE_SEL);
			} else {
				selection = SEL(ESCAPE_SEL);
			}

			if (selection == 0) {
				MSG(HUKA_ORDER_ESCAPE_GO);
				CLOSE_MSG_WIN();
				FUNCTION_00B7(0);
				BIT_ON((((0 + 0x0400) + 0x0800) + 121));
				return_to_entrance();
				return;
			}

			MSG(HUKA_ORDER_RESTART);
			BGMorder_for_huka();
			return;
		case 1: // music menu, the rest of the code focuses on this
			BGMorder_to_change_bgm();
			return;
		case 2: // go back to tartarus music
			// Checks if answer
			if (FUNCTION_01E9() == 1) {

				if ((GET_FLOOR_ID() >= 2) && (GET_FLOOR_ID() <= 20)) {
				playBGM(94);
				} else if ((GET_FLOOR_ID() >= 21) && (GET_FLOOR_ID() <= 40)) {
				playBGM(95);
				} else if ((GET_FLOOR_ID() >= 41) && (GET_FLOOR_ID() <= 70)) {
				playBGM(96);
				} else if ((GET_FLOOR_ID() >= 71) && (GET_FLOOR_ID() <= 100)) {
				playBGM(97);
				} else if ((GET_FLOOR_ID() >= 101) && (GET_FLOOR_ID() <= 130)) {
				playBGM(98);
				} else if ((GET_FLOOR_ID() >= 131) && (GET_FLOOR_ID() <= 160)) {
				playBGM(99);
				} else if ((GET_FLOOR_ID() >= 160) && (GET_FLOOR_ID() <= 190)) {
				playBGM(100);
				}
			} else if ((GET_FLOOR_ID() >= 2) && (GET_FLOOR_ID() <= 0x10) ||
								 ((GET_FLOOR_ID() >= 290) && (GET_FLOOR_ID() <= 299))) {
			playBGM(1);
			} else if ((GET_FLOOR_ID() >= 17) && (GET_FLOOR_ID() <= 0x40)) {
			playBGM(70);
			} else if ((GET_FLOOR_ID() >= 65) && (GET_FLOOR_ID() <= 114)) {
			playBGM(81);
			} else if ((GET_FLOOR_ID() >= 115) && (GET_FLOOR_ID() <= 164)) {
			playBGM(72);
			} else if ((GET_FLOOR_ID() >= 164) && (GET_FLOOR_ID() <= 214)) {
			playBGM(73);
			} else if ((GET_FLOOR_ID() >= 215) && (GET_FLOOR_ID() <= 254)) {
			playBGM(74);
			} else if (((GET_FLOOR_ID() >= 255) && (GET_FLOOR_ID() <= 263))) {
			playBGM(75);
			}
			MSG(HUKA_ORDER_BGM_CHANGE_RE);
			break;

		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
}

void ShowFuukaTutorial()
{
	MSG_HELP( Fuuka_Tutorial );
	BIT_ON( 9998 );
	return;
}

void BGMorder_to_change_bgm() {
	
	if (AnySongs() != true)
	{
		OPEN_MSG_WIN();
		MSG(No_Music);
		CLOSE_MSG_WIN();
		FUNCTION_00B7(0);
		return;
	}
	if ( BIT_CHK( 9998 ) == 0 )
	{
		CLOSE_MSG_WIN();
		FUNCTION_00B7(0);
		ShowFuukaTutorial();
	}
	OPEN_MSG_WIN();
	MSG(BGMHUKA_ORDER_BGM_CHANGE);

	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(8, 4);	// shuffle current menu, select
	//SEL_CHK_PAD(13, 5); // next page, d-pad right
	//SEL_CHK_PAD(15, 6); // prev page, d-pad left
	SEL_CHK_PAD(11, 7); // up 1 page, start

	int selection = SEL(BGMBGM_SEL);
	switch (selection) {
		case 0:
			if (PersonaSongs() != true)
			{
				OPEN_MSG_WIN();
				MSG(No_PersonaMusic);
				CLOSE_MSG_WIN();
				FUNCTION_00B7(0);
				return;
			}
			else {
				P_Music();
			}
			break;
		case 1:
			if (PersonaSongs() != true)
			{
				OPEN_MSG_WIN();
				MSG(No_SMTMusic);
				CLOSE_MSG_WIN();
				FUNCTION_00B7(0);
				return;
			}
			else {
				SMT_Music();
			}
			break;
		case 2:
			if (PersonaSongs() != true)
			{
				OPEN_MSG_WIN();
				MSG(No_SpinMusic);
				CLOSE_MSG_WIN();
				FUNCTION_00B7(0);
				return;
			}
			else {
				SpinSMT_Music();
			}
			break;
		case 3: //Skip to case 4
		case 4:
			SET_CNT(9998, 1);
			Random();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 7:
			BGMorder_for_huka();
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
}

void P_Music()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = P_Music1();
				break;
			case 2:
				page = P_Music2();
				break;
			case 3:
				page = P_Music3();
				break;
			 default:
				break;
		}
	}
	return;
}

int P_Music1() {
	MSG(HUKA_ORDER_BGM_CHANGE2_1of3);

	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P_Music);

	switch (selection) {
		case 0:
			P1();
			break;
		case 1:
			IS();
			break;
		case 2:
			EP();
			break;
		case 3:
			P3();
			break;
		case 4:
			return 2;
		case 5:
			return 3;
		case 6:
			BGMorder_to_change_bgm();
			break;
		case 7:
			SET_CNT(9998, 2);
			RandomPersona();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO); 
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int P_Music2() {
	MSG(HUKA_ORDER_BGM_CHANGE2_2of3);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P_Music2);
	switch (selection) {
		case 0:
			P4();
			break;
		case 1:
			PQ();
			break;
		case 2:
			P5();
			break;
		case 4:
			return 3;
		case 5:
			return 1;
		case 6:
			BGMorder_to_change_bgm();
			break;
		case 7:
			SET_CNT(9998, 2);
			RandomPersona();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int P_Music3() {
	MSG(HUKA_ORDER_BGM_CHANGE2_3of3);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P_Music3);
	switch (selection) {
		case 0:
			SET_CNT(9998, 2);
			RandomPersona();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			BGMorder_to_change_bgm();
			break;
		case 4:
			return 1; // loop back to start of menu
		case 5:
			return 2;
		case 6:
			BGMorder_to_change_bgm();
			break;
		case 7:
			SET_CNT(9998, 2);
			RandomPersona();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO); 
			break;			
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void P1()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = P1_1();
				break;
			case 2:
				page = P1_2();
				break;
			 default:
				break;
		}
	}
	return;
}

int P1_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P1);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(p1_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomP1();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int P1_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P1_2);
	switch (selection) {
		case 0:
		case 1:
			playBGM(p1_start + selection + 4);
		case 2:
			SET_CNT(9998, 3);
			RandomP1();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 3:
			P_Music();
			break;
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomP1();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void IS()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = IS_1();
				break;
			case 2:
				page = IS_2();
				break;
			case 3:
				page = IS_3();
				break;
			default:
				break;
		}
	}
	return;
}

int IS_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of3);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(IS);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(is_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 3;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomIS();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int IS_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of3);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(IS_2);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(is_start + selection + 4);
			break;
		case 4:
			return 3;
		case 5:
			return 1;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomIS();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int IS_3() {
	MSG(HUKA_ORDER_BGM_CHANGE3_3of3);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(IS_3);
	switch (selection) {
		case 0:
		case 1:
			playBGM(is_start + selection + 8);
			break;
		case 2:
			SET_CNT(9998, 3);
			RandomIS();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
		case 3:
			P_Music();
		case 4:
			return 1; // create new menu
		case 5:
			return 2;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomIS();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
	default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void EP()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = EP_1();
				break;
			case 2:
				page = EP_2();
				break;
			case 3:
				page = EP_3();
				break;
			default:
				break;
		}
	}
	return;
}

int EP_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of3);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(EP);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(ep_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 3;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomEP();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int EP_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of3);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(EP_2);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(ep_start + selection + 4);
			break;
		case 4:
			return 3;
		case 5:
			return 1;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomEP();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int EP_3() {
	MSG(HUKA_ORDER_BGM_CHANGE3_3of3);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(EP_3);
	switch (selection) {
		case 0:
			playBGM(ep_start + selection + 6);
		case 1:
			SET_CNT(9998, 3);
			RandomEP();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 2:
			P_Music();
			break;
		//case 3:
		case 4:
			return 2;
		case 5:
			return 1;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomEP();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
	default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void P3()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = P3_1();
				break;
			case 2:
				page = P3_2();
				break;
			default:
				break;
		}
	}
	return;
}

int P3_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P3);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(p3_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomP3();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int P3_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P3_2);
	switch (selection) {
		case 0:
			SET_CNT(9998, 3);
			RandomP3();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			P_Music();
		//case 2:
		//case 3:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomP3();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void P4()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = P4_1();
				break;
			case 2:
				page = P4_2();
				break;
			default:
				break;
		}
	}
	return;
}

int P4_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P4);
	switch (selection) {
		case 0:
		case 1:
		case 2:	
		case 3:
			playBGM(p4_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomP4();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int P4_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P4_2);
	switch (selection) {
		case 0:
			SET_CNT(9998, 3);
			RandomP4();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			P_Music();
			break;
		//case 2:
		//case 3:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomP4();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
	default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void PQ()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = PQ_1();
				break;
			case 2:
				page = PQ_2();
				break;
			default:
				break;
		}
	}
	return;
}

int PQ_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(PQ);
	switch (selection) {
		case 0:
		case 1:
		case 2:
			playBGM(pq_start + selection);
			break;
		//case 3:
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomPQ();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int PQ_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(PQ_2);
	switch (selection) {
		case 0:
			SET_CNT(9998, 3);
			RandomPQ();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			P_Music();
			break;
		//case 2:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomPQ();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void P5()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = P5_1();
				break;
			case 2:
				page = P5_2();
				break;
			default:
				break;
		}
	}
	return;
}

int P5_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P5);
	switch (selection) {
		case 0:
		case 1:
		case 2:	
		case 3:
			playBGM(p5_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomP5();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int P5_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(P5_2);
	switch (selection) {
		case 0:
			SET_CNT(9998, 3);
			RandomP5();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			P_Music();
			break;
		//case 2:
		//case 3:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			P_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomP5();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void SMT_Music() {
	MSG(HUKA_ORDER_BGM_CHANGE2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	//SEL_CHK_PAD(13, 4); // next page, d-pad right
	//SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(SMT_Music);
	switch (selection) {
		case 0:
			SMT1();
			break;
		case 1:
			SMT3();
			break;
		case 2:
			SET_CNT(9998, 2);
			RandomSMT();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break; 
		case 3:
		case 6:
			BGMorder_to_change_bgm();
			break;
		case 7:
			SET_CNT(9998, 2);
			RandomSMT();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		//case 4:
		//case 5:	
		default:
			break;
	}
	return;
}

void SMT1()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = SMT1_1();
				break;
			case 2:
				page = SMT1_2();
				break;
			default:
				break;
		}
	}
	return;
}

int SMT1_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(SMT1);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(smt1_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			SMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomSMT1();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int SMT1_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(SMT1_2);
	switch (selection) {
		case 0:
			SET_CNT(9998, 3);
			RandomSMT1();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			SMT_Music();
			break;
		//case 2:
		//case 3:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			SMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomSMT1();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void SMT3()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = SMT3_1();
				break;
			case 2:
				page = SMT3_2();
				break;
			default:
				break;
		}
	}
	return;
}

int SMT3_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(SMT3);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(smt3_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			SMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomSMT3();
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int SMT3_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(SMT3_2);
	switch (selection) {
		case 0:
			SET_CNT(9998, 3);
			RandomSMT3();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			SMT_Music();
			break;
		//case 2:
		//case 3:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			SMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomSMT3();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void SpinSMT_Music()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = SpinSMT_Music_1();
				break;
			case 2:
				page = SpinSMT_Music_2();
				break;
			default:
				break;
		}
	}
	return;
}

int SpinSMT_Music_1() {
	MSG(HUKA_ORDER_BGM_CHANGE2_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(SpinSMT_Music);
	switch (selection) {
		case 0:
			MJ();
			break;
		case 1:
			MJ2();
			break;
		case 2:
			DDS();
			break;
		case 3:
			Raidou();
			break;
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			BGMorder_to_change_bgm();
			break;
		case 7:
			SET_CNT(9998, 2);
			RandomSpin();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int SpinSMT_Music_2() {
	MSG(HUKA_ORDER_BGM_CHANGE2_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(SpinSMT_Music2);
	switch (selection) {
		case 0:
			Other();
			break;
		case 1:
			SET_CNT(9998, 2);
			RandomSpin();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 2:
			BGMorder_to_change_bgm();
			break;
		//case 3:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			BGMorder_to_change_bgm();
			break;
		case 7:
			SET_CNT(9998, 2);
			RandomSpin();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void MJ()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = MJ_1();
				break;
			case 2:
				page = MJ_2();
				break;
			default:
				break;
		}
	}
	return;
}

int MJ_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(MJ);
	switch (selection) {
		case 0:
		case 1:
		case 2:
			playBGM(mj_start + selection);
			break;
		//case 3:
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			SpinSMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomMJ();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break; 
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int MJ_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(MJ_2);
	switch (selection) {
		case 0:
			SET_CNT(9998, 3);
			RandomMJ();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			SpinSMT_Music();
			break;
		//case 2:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			SpinSMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomMJ();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void MJ2()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = MJ2_1();
				break;
			case 2:
				page = MJ2_2();
				break;
			default:
				break;
		}
	}
	return;
}

int MJ2_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(MJ2);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(mj2_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			SpinSMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomMJ2();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int MJ2_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(MJ2_2);
	switch (selection) {
		case 0:
			playBGM(mj2_start + selection + 4);
			break;
		case 1:
			SET_CNT(9998, 3);
			RandomMJ2();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 2:
			SpinSMT_Music();
		//case 3:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			SpinSMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomMJ2();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void DDS()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = DDS_1();
				break;
			case 2:
				page = DDS_2();
				break;
			default:
				break;
		}
	}
	return;
}

int DDS_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(DDS);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(dds_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			SpinSMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomDDS();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int DDS_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(DDS_2);
	switch (selection) {
		case 0:
			SET_CNT(9998, 3);
			RandomDDS();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			SpinSMT_Music();
			break;
		//case 2:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			SpinSMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomDDS();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void Raidou()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = Raidou_1();
				break;
			case 2:
				page = Raidou_2();
				break;
			default:
				break;
		}
	}
	return;
}

int Raidou_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(Raidou);
	switch (selection) {
		case 0:
		case 1:
		case 2:
		case 3:
			playBGM(rai_start + selection);
			break;
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			SpinSMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomRaidou();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int Raidou_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(Raidou_2);
	switch (selection) {
		case 0:
			SET_CNT(9998, 3);
			RandomRaidou();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			SpinSMT_Music();
			break;
		//case 2:
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			SpinSMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomRaidou();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

void Other()
{
	bool selecting = true;
	int page = 1;
	while(selecting)
	{
		switch(page)
		{	
			case 0:
				selecting = false;
				break;
			case 1:
				page = Other_1();
				break;
			case 2:
				page = Other_2();
				break;
			default:
				break;
		}
	}
	return;
}

int Other_1() {
	MSG(HUKA_ORDER_BGM_CHANGE3_1of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(Other);
	switch (selection) {
		case 0:
		case 1:
		case 2:
			playBGM(misc_start + selection);
			break;
		//case 3:
		case 4:
			return 2;
		case 5:
			return 2;
		case 6:
			SpinSMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomOther();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}

	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

int Other_2() {
	MSG(HUKA_ORDER_BGM_CHANGE3_2of2);
	SEL_CHK_PAD(6, 99); // Exit menu, circle
	SEL_CHK_PAD(13, 4); // next page, d-pad right
	SEL_CHK_PAD(15, 5); // prev page, d-pad left
	SEL_CHK_PAD(11, 6); // up 1 page, start
	SEL_CHK_PAD(8, 7);	// shuffle current menu, select

	int selection = SEL(Other_2);
	switch (selection) {
		case 0:
			SET_CNT(9998, 3);
			RandomOther();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		case 1:
			SpinSMT_Music();
			break;
		case 4:
			return 1;
		case 5:
			return 1;
		case 6:
			SpinSMT_Music();
			break;
		case 7:
			SET_CNT(9998, 3);
			RandomOther();
			MSG(BASE_HUKA_ORDER_BGM_CHANGE_DO);
			break;
		default:
			break;
	}
	CLOSE_MSG_WIN();
	FUNCTION_00B7(0);
	return 0;
}

bool AnySongs() {
	for (int i = PersonaStartID; i <= SpinEndID; i++) {
		if (BIT_CHK(i)) {
			return true;
		}
	}
	return false;
}

bool PersonaSongs() {
	for (int i = PersonaStartID; i <= PersonaEndID; i++) {
		if (BIT_CHK(i)) {
			return true;
		}
	}
	return false;
}

bool SMTSongs() {
	if ((BIT_CHK(SMTStartID) == 1) || (BIT_CHK(SMTEndID) == 1)) {
			return true;
		}
	return false;
}

bool SpinSongs() {
	for (int i = SpinStartID; i <= SpinEndID; i++) {
		if (BIT_CHK(i)) {
			return true;
		}
	}
	return false;
}


void AnswerMusic() {
	if (!BIT_CHK(579)) {
		for (int i = 579; i <= 592; i++) {
			if (!BIT_CHK(i)) {
				BIT_ON(i);
			 }
		}
	}
}